//
// Created by dudu233 on 2024/5/26.
//

#include "window.h"
#include "conio.h"
#include "debug.h"
#include "graphics.h"
#include "resource.h"
#include "sound.h"
#include "vector"


void drawButton(int x, int y, int width, int height, COLORREF color, const char *text, int textHeight, COLORREF textColor) {
    setfillcolor(color);
    solidroundrect(x, y, x + width, y + height, 20, 20);
    settextstyle(textHeight, 0, "黑体");
    setbkmode(TRANSPARENT);
    settextcolor(textColor);
    outtextxy(x + (width / 2) - textwidth(text) / 2, y + (height / 2) - textheight(text) / 2, text);
}

void init_graph(int width, int height) {
    debug("create " + std::to_string(width) + "x" + std::to_string(height) + " window, radio is " +
          std::to_string(1.0 * width / WINDOW_WIDTH) + "x" + std::to_string(1.0 * height / WINDOW_HEIGHT) + ".");
    // 创建绘图窗口 允许双击
    initgraph(width, height, EX_DBLCLKS);
    // 默认的分辨率为 800*600 如果不一样则缩放窗口
    setaspectratio(1.0 * width / WINDOW_WIDTH, 1.0 * height / WINDOW_HEIGHT);
    // 设置背景颜色 和 透明
    setbkcolor(WHITE);
    setbkmode(TRANSPARENT);

    //获取窗口句柄
    HWND h = GetHWnd();
    //修改窗口标题
    SetWindowText(h, "打地鼠小游戏");
}

void main_listener() {
    MOUSEMSG m;
    int x, y;
    while (true) {
        m = GetMouseMsg();
        x = m.x;
        y = m.y;
        if (m.mkLButton || m.mkMButton || m.mkRButton) {
            if (x >= BUTTON_MAIN_STARTGAME_X && x <= BUTTON_MAIN_STARTGAME_XX && y >= BUTTON_MAIN_STARTGAME_Y && y <= BUTTON_MAIN_STARTGAME_YY) {
                debug("start button is clicked.");
                init_game_graph();
                break;
            } else if (x >= 20 && x <= 120 && y >= 530 && y <= 580) {
                debug("settings button is clicked.");
                init_settings_graph();
                break;
            } else if (x >= 640 && x <= 780 && y >= 530 && y <= 580) {
                debug("exit button is clicked.");
                exit(0);
            }
        }
    }
}

void init_main_graph() {
    // 清空窗口
    cleardevice();
    // 加载音效
    closeSoundAll();
    playSound(MAIN);
    // 加载主窗口图片
    IMAGE img;
    loadimage(&img, getPic("main").c_str(), 800, 600);
    putimage(0, 0, &img);
    // 绘制按钮
    drawButton(BUTTON_MAIN_STARTGAME_X, BUTTON_MAIN_STARTGAME_Y, BUTTON_MAIN_STARTGAME_WIDTH, BUTTON_MAIN_STARTGAME_HEIGHT, BUTTON_MAIN_COLOR, "开始游戏", 40, BUTTON_MAIN_TEXTCOLOR);
    drawButton(20, 530, 100, 50, BUTTON_MAIN_COLOR, "设置", 30, BUTTON_MAIN_TEXTCOLOR);
    drawButton(640, 530, 140, 50, BUTTON_MAIN_COLOR, "退出游戏", 30, BUTTON_MAIN_TEXTCOLOR);
    // 返回按钮点击监听线程
    main_listener();
}

void settings_listener() {
    MOUSEMSG m;		// 定义消息变量
    int x, y;
    while (true) {
        // 获取一条鼠标或按键消息
        m = GetMouseMsg();
        x = m.x;
        y = m.y;
        // TODO 监听设置的鼠标事件
        // 函数声明
        void drawOptionsList(int startX, int startY, int width, int height);
        void drawVolumeControl();
        void handleMouseDrag(int x,int y);
        switch(m.uMsg) {
            case WM_LBUTTONDOWN:   //  左键单击
            {
                if(x>=50&&x<=250&&y>=200&&y<=250) {
                    // 简单模式
                }
                else if(x>=50&&x<=250&&y>=300&&y<=350) {
                    // 普通模式
                }
                else if(x>=50&&x<=250&&y>=400&&y<=450) {
                    // 困难模式
                }else if (x >= 640 && x <= 780 && y >= 530 && y <= 580) {
                    init_main_graph(); // 返回主界面
                }
            }

            case (WM_LBUTTONDOWN&&WM_MOUSEMOVE): {
                handleMouseDrag(m.x,m.y);
                drawVolumeControl(); // 更新界面显示

            }
        }
        }
    }

// 全局变量
int selectedResolutionIndex = 0;
std::vector<std::pair<int, int>> resolutions = {{640, 480}, {800, 600}, {1024, 768}, {1280, 720}, {1920, 1080}}; // 常用分辨率列表
int volume = 50;                                            // 初始音量值（0-100）
// 绘制选项列表
void drawOptionsList(int startX, int startY, int width, int height) {
    setfillcolor(WHITE);
    setlinecolor(BLUE);
    solidrectangle(startX, startY, startX + width, startY + height);
    settextstyle(30, 0, "楷体");

    for (size_t i = 0; i < resolutions.size(); ++i) {
        char resStr[20];
        sprintf(resStr, "%d x %d", resolutions[i], resolutions[i]);
        outtextxy(startX + 10, startY + 10 + i * 30, resStr);
        if (i == selectedResolutionIndex) {
            setfillcolor(LIGHTGRAY);
            solidrectangle(startX + 5, startY + 5 + i * 30, startX + width - 5, startY + 30 + i * 30);
            setfillcolor(WHITE);
        }
    }
}

// 绘制音量调节界面
void drawVolumeControl() {

    // 绘制音量调节标题
    settextstyle(30, 0, "楷体");
    outtextxy(310, 230, "音量调节");

    // 绘制滑动条背景
    rectangle(350, 300, 750, 350);

    // 计算当前滑块的位置
    int sliderPos = 350 + volume * 400 / 100;

    // 绘制滑动条当前值
    setfillcolor(YELLOW);
    solidrectangle(350, 300, sliderPos, 350);

    // 绘制滑块
    setfillcolor(WHITE);
    solidrectangle(sliderPos - 5, 300, sliderPos + 5, 350);

    // 显示当前音量值
    char volStr[20];
    sprintf(volStr, "音量: %d%%", volume);
    setVolumn(volume);
    outtextxy(310, 380, volStr);
}
// 处理鼠标拖动事件
void handleMouseDrag(int x,int y) {
    if(y>=290&y<=360&x>=340&x<=760) {
        if (x < 350) x = 350;
        if (x > 750) x = 750;
        volume = (x - 350) * 100 / 400;
    }


}
// 绘制分辨率选择界面
void drawResolutionMenu() {
    // 绘制背景
    setbkcolor(WHITE);
    cleardevice();

    // 绘制标题
    settextstyle(20, 10, "楷体");
    outtextxy(300, 100, "选择分辨率");

    // 绘制分辨率选项
    settextstyle(20, 10, "楷体");
    int y = 200;
    for (size_t i = 0; i < resolutions.size(); ++i) {
        char resStr[20];
        sprintf(resStr, "%d x %d", resolutions[i].first, resolutions[i].second);
        outtextxy(300, y, resStr);
        if (i == selectedResolutionIndex) {
            rectangle(295, y - 5, 505, y + 20);
        }
        y += 30;
    }
}
void init_settings_graph() {
    // 清空窗口
    cleardevice();
    // 加载设置图片
    IMAGE img;
    loadimage(&img, getPic("main").c_str(), 800, 600);
    putimage(0, 0, &img);
    // TODO xb：做完以下内容以后删掉本行
    // 设置标题
    settextstyle(30, 0, _T("楷体"));
    RECT r = {0, 0, 800, 50};
    drawtext(_T("设置"), &r, DT_CENTER | DT_VCENTER | DT_SINGLELINE);
    // 设置返回按键
    drawButton(640, 530, 140, 50, BUTTON_MAIN_COLOR, "返回", 30, BUTTON_MAIN_TEXTCOLOR);
    // 绘制难度选择标题
    settextstyle(30, 0, "楷体");
    settextcolor(BLACK);
    outtextxy(75, 100, "游戏难度:");
    // 绘制难度按钮
    settextstyle(20, 10, "楷体");
    rectangle(50, 200, 250, 250);
    outtextxy(120, 215, "简单");

    rectangle(50, 300, 250, 350);
    outtextxy(120, 315, "中等");

    rectangle(50, 400, 250, 450);
    outtextxy(120, 415, "困难");

    // 分辨率设置

    // 音量设置
    drawVolumeControl();

    // 返回按钮点击监听线程
    settings_listener();
}


void game_listener() {
    MOUSEMSG m;
    int x, y;
    while (true) {
        m = GetMouseMsg();
        x = m.x;
        y = m.y;
        // TODO 监听游戏中的鼠标事件
    }
}

void init_game_graph() {
    // 清空窗口
    cleardevice();
    // 加载音效 随机选择一首
    closeSoundAll();
    if (rand() % 2 == 1) {
        playSound(GAMING1);
    } else {
        playSound(GAMING2);
    }
    // 加载游戏图片
    IMAGE img;
    loadimage(&img, getPic("game").c_str(), 800, 600);
    putimage(0, 0, &img);
    // 返回按钮点击监听线程
    game_listener();
}